AC_INIT(README)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(mod-globule, 1.3.2)
AC_CONFIG_HEADERS(globule/config.h psodium/config.h monitor/config.h)
AC_PREFIX_DEFAULT(/dev/null)

AH_VERBATIM([__STDC_CONSTANT_MACROS],
[/* GLOBULE: To have INT64_C be defined, used in APR_USEC_PER_SEC.  */
#ifndef __STDC_CONSTANT_MACROS
# define __STDC_CONSTANT_MACROS
#endif])

AH_TEMPLATE([DNS_REDIRECTION],
            [GLOBULE: Define when using an Apache that supports UDP and you
	     want to use DNS-based redirection in stead of only HTTP-based.])
AH_TEMPLATE([PSODIUM],
            [GLOBULE: Define when Globule should include support for
	     cooperating with pSodium module.])

AC_PROG_CC
AC_PROG_CXX
modifiedflags=

if test x$CXX = xg++ ; then
  AC_MSG_CHECKING([for g++ compiler version])
  CXX_VERSION=`$CXX --version 2>&1 | sed -e 's/^[[^0-9]]*\([[0-9]][[0-9]]*\.[[0-9]][[0-9\.]]*\).*$/\1/p' -e 'd'`
  case $CXX_VERSION in
  1.*|2.*)
    AC_MSG_RESULT([$CXX_VERSION])
    AC_MSG_ERROR([*** using a too old g++ version - please upgrade to g++-3 ***])
    ;;
  *)
    AC_MSG_RESULT([$CXX_VERSION ok])
    ;;
  esac
fi

dnl Define C++ as the default language
AC_LANG_CPLUSPLUS
AC_HEADER_STDC
AC_CHECK_LIB(resolv, gethostbyname)
AC_CHECK_LIB(mysqlclient, mysql_store_result)
AC_CHECK_LIB(z, gzopen)
AC_CHECK_HEADERS(strings.h unistd.h math.h getopt.h limits.h values.h zlib.h)
AC_CHECK_FUNCS(getopt_long lrint llrint)
dnl AC_DEFINE([HAVE_LRINT], [], [lrint function])
dnl AC_DEFINE([HAVE_LLRINT], [], [llrint function])
dnl AC_DEFINE([HAVE_GETOPT_LONG], [], [getopt_long function])
dnl AC_C99_FUNC_LRINT

AC_ARG_ENABLE(dns-redirection,
[  --enable-dns-redirection  Enable the use of DNS-based redirection],
AC_DEFINE(DNS_REDIRECTION, 1, "Enabled DNS redirection"), [])

AC_ARG_ENABLE(singlechild,
[  --enable-singlechild      Indicate the server will have a ServerLimit of 1],
AC_DEFINE(SINGLECHILD, 1, "Server has ServerLimit of 1 (normally not used)"), [])

AC_ARG_ENABLE(maintainer,
[  --enable-maintainer       Turn on maintainer mode],
[case "${enableval}" in
  yes) debug=true
    if test -z "modifiedflags" ; then
      modifiedflags=1
      CFLAGS=
      CXXFLAGS=
    fi
    CFLAGS="$CFLAGS -DDEBUG"
    CXXFLAGS="$CXXFLAGS -DDEBUG"
    ;;
  no) debug=false
    if test -z "modifiedflags" ; then
      modifiedflags=1
      CFLAGS=
      CXXFLAGS=
    fi
    ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-maintainer) ;;
esac],[debug=false])
AC_ARG_ENABLE(debug,
[  --enable-debug            Turn on debuging],
[case "${enableval}" in
  yes) debug=true
    if test -z "modifiedflags" ; then
      modifiedflags=1
      CFLAGS=
      CXXFLAGS=
    fi
    if test x$GCC = xyes ; then
      debuggcc=true
      CFLAGS="-ggdb -Wall"
      CXXFLAGS="-ggdb -Wall"
    else
      CFLAGS="$CFLAGS +w"
      CXXFLAGS="$CXXFLAGS +w"
    fi
    CFLAGS="$CFLAGS -DDEBUG"
    CXXFLAGS="$CXXFLAGS -DDEBUG"
    ;;
  no) debug=false
    if test -z "modifiedflags" ; then
      modifiedflags=1
      CFLAGS=
      CXXFLAGS=
    fi
    CFLAGS="`echo $CFLAGS | sed -e 's/-g//g'`"
    CXXFLAGS="`echo $CXXFLAGS | sed -e 's/-g//g'`"
    ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac],[debug=false])
AM_CONDITIONAL(DEBUG, [test x$debug = xtrue])
AM_CONDITIONAL(DEBUGGCC, [test x$debuggcc = xtrue])

AC_ARG_ENABLE(optimize,
[  --enable-optimize         Control optimization],
[case "${enableval}" in
  no) optimize=false
    if test -z "modifiedflags" ; then
      modifiedflags=1
      CFLAGS=
      CXXFLAGS=
    fi
    CFLAGS="`echo $CFLAGS | sed -e 's/-O2//g'`"
    CXXFLAGS="`echo $CXXFLAGS | sed -e 's/-O2//g'`"
    ;;
  yes) optimize=true
    if test -z "modifiedflags" ; then
      modifiedflags=1
      CFLAGS=
      CXXFLAGS=
    fi
    CFLAGS="$CFLAGS -O2 -DNDEBUG"
    CXXFLAGS="$CXXFLAGS -O2 -DNDEBUG"
    ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-optimize) ;;
esac],[optimize=normal])
AM_CONDITIONAL(OPTIMIZE, [test x$optimize = xtrue])

AC_ARG_ENABLE(profile,
[  --enable-profile          Turn on profiling],
[case "${enableval}" in
  yes) profile=true
    if test x$GCC = xyes ; then
      CFLAGS="$CFLAGS -pg"
      CXXFLAGS="$CFLAGS -pg"
    else
      CFLAGS="$CFLAGS -g"
      CXXFLAGS="$CFLAGS -g"
    fi
    ;;
  no) profile=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-profile) ;;
esac],[profile=false])
AM_CONDITIONAL(PROFILE, [test x$profile = xtrue])

AC_ARG_ENABLE(replacement-rmm,
[  --enable-replacement-rmm  Use the replacement apr_rmm module],
[case "${enableval}" in
  yes) replacementrmm=true
       CFLAGS="$CFLAGS -DHAVE_MYAPR"
       CXXFLAGS="$CXXFLAGS -DHAVE_MYAPR"
       ;;
  no)  replacementrmm=false ;;
  *)   AC_MSG_ERROR(bad value ${enableval} for --enable-replacement-rmm) ;;
esac],[replacementrmm=false])
AM_CONDITIONAL(REPLACEMENTRMM, test x$replacementrmm = xtrue)

AC_PROG_INSTALL
AM_PROG_LIBTOOL
dnl AM_PROG_MAKE_SET
AM_SANITY_CHECK
missing_dir=`cd $ac_aux_dir && pwd`
AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)
AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)
AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)
AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)
AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)

AC_DEFUN([AC_FUNC_SNPRINTF],
[AC_CHECK_FUNCS(snprintf vsnprintf)
AC_MSG_CHECKING(for working snprintf)
AC_CACHE_VAL(ac_cv_have_working_snprintf,
[AC_TRY_RUN(
[#include <stdio.h>
#include <string.h>
int main(void)
{
    char bufs[5] = { 'x', 'x', 'x', '\0', '\0' };
    char bufd[5] = { 'x', 'x', 'x', '\0', '\0' };
    int i;
    i = snprintf (bufs, 2, "%s", "111");
    if (strcmp (bufs, "1")) exit (1);
    if (i != 3) exit (1);
    i = snprintf (bufd, 2, "%d", 111);
    if (strcmp (bufd, "1")) exit (1);
    if (i != 3) exit (1);
    exit(0);
}], ac_cv_have_working_snprintf=yes, ac_cv_have_working_snprintf=no, ac_cv_have_working_snprintf=cross)])
AC_MSG_RESULT([$ac_cv_have_working_snprintf])
AC_MSG_CHECKING(for working vsnprintf)
AC_CACHE_VAL(ac_cv_have_working_vsnprintf,
[AC_TRY_RUN(
[#include <stdio.h>
#include <stdarg.h>
#include <string.h>
int my_vsnprintf (char *buf, const char *tmpl, ...)
{
    int i;
    va_list args;
    va_start (args, tmpl);
    i = vsnprintf (buf, 2, tmpl, args);
    va_end (args);
    return i;
}
int main(void)
{
    char bufs[5] = { 'x', 'x', 'x', '\0', '\0' };
    char bufd[5] = { 'x', 'x', 'x', '\0', '\0' };
    int i;
    i = my_vsnprintf (bufs, "%s", "111");
    if (strcmp (bufs, "1")) exit (1);
    if (i != 3) exit (1);
    i = my_vsnprintf (bufd, "%d", 111);
    if (strcmp (bufd, "1")) exit (1);
    if (i != 3) exit (1);
    exit(0);
}], ac_cv_have_working_vsnprintf=yes, ac_cv_have_working_vsnprintf=no, ac_cv_have_working_vsnprintf=cross)])
AC_MSG_RESULT([$ac_cv_have_working_vsnprintf])
if test x$ac_cv_have_working_snprintf$ac_cv_have_working_vsnprintf != "xyesyes"; then
  dnl AC_LIBOBJ(compat/snprintf_2.2/snprintf)
  dnl AC_MSG_WARN([Replacing missing/broken (v)snprintf() with version from http://www.ijs.si/software/snprintf/.])
  AC_MSG_WARN([Missing/broken (v)snprintf() should not be used])
  AC_DEFINE(PREFER_PORTABLE_SNPRINTF, 1, [Enable replacement (v)snprintf if system (v)snprintf is broken.])
fi])
AC_MSG_CHECKING(whether mandrake10 apr_vsnprintf problem)
AC_CACHE_VAL(ac_cv_mandrake10_apr_vsnprintf,
[AC_TRY_RUN(
[#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
char buffer[16];
void fn(char *cmp, char *fmt, ...)
{
  va_list ap;
  va_start(ap,fmt);
  vsnprintf(buffer,16,fmt,ap);
  if(strcmp(cmp,buffer)) exit(1);
  vsnprintf(buffer,16,fmt,ap);
  if(strcmp(cmp,buffer)) exit(1);
  va_end(ap);
}
int main(void)
{
  fn("abcde0123456789","abcde%s","0123456789");
  exit(0);
}], ac_cv_mandrake10_apr_vsnprintf=yes, ac_cv_mandrake10_apr_vsnprintf=no, ac_cv_mandrake10_apr_vsnprintf=cross)])
AC_MSG_RESULT([$ac_cv_mandrake10_apr_vsnprintf])
if test x$ac_cv_mandrake10_apr_vsnprintf != "xyes"; then
  AC_MSG_WARN([Mandrake/AMD64 Patch for apr_vsnprintf])
  AC_DEFINE(MANDRAKE10_PATCH, 1, [Enable vsnprintf for Mandrake10/AMD64 systems which have problem with multiple usage of variable argument list.])
fi

AC_FUNC_SNPRINTF

AC_ARG_WITH(apache, AC_HELP_STRING([--with-apache=<dir>], [Location of Apache]))
AC_ARG_WITH(apxs,   AC_HELP_STRING([--with-apxs=<dir>],   [Location of apxs utility]))
if test "$with_apache" != "no" ; then
  if test "$with_apache" == "yes" -o -z "$with_apache" ; then
    AC_CHECK_PROG(APXS, apxs, apxs)
    if test -z "$APXS" ; then
      AC_CHECK_PROG(APXS, apxs2, apxs2)
    fi
    if test -n "$with_apxs" -a "$with_apxs" != "no" ; then
      if test -z "$APXS" ; then
        AC_MSG_WARN([Overriding --with-apache with --with-apxs flag])
      fi
      AC_PATH_PROG(APXS, $with_apxs, $with_apxs, )
    fi
  else
    if test -n "$with_apxs" -a "$with_apxs" != "no" ; then
      AC_MSG_WARN([Ignoring --with-apxs flag information])
    fi
    AC_PATH_PROG(APXS,apxs,,[$with_apache/sbin $with_apache/bin /usr/local/globule/bin])
    if test -z "$APXS" ; then
      AC_PATH_PROG(APXS,apxs2,,[$with_apache/sbin $with_apache/bin])
    fi
  fi
  if test -n "$with_apache" -a -z "$APXS" ; then
    AC_MSG_ERROR([*** apxs missing - please use the --with-apache or --with-apxs flag ***])
  else if test -n "$APXS" ; then
    if $APXS -q BINDIR > /dev/null 2> /dev/null ; then
      APACHE_BINDIRS=`$APXS -q SBINDIR BINDIR | sed -e 's/;/:/g'`
    else
      APACHE_BINDIRS=`$APXS -q SBINDIR | sed -e 's/;/:/g'`
    fi
    APACHE_TARGET=`$APXS -q TARGET`
    AC_PATH_PROG(HTTPD,[$APACHE_TARGET],,[$APACHE_BINDIRS])
    if test -z "$HTTPD" ; then
    	AC_MSG_ERROR([*** httpd missing - check your Apache installation ***])
    fi
    AC_SUBST(HTTPD,$HTTPD)
    AC_SUBST(APACHE,yes)
  else
    AC_MSG_RESULT([Apache not found])
    AC_MSG_ERROR([*** apxs missing - please use the --with-apache or --with-apxs flag ***])
  fi ; fi
else
  AC_MSG_ERROR([*** Apache is a required package  ***])
fi
AC_SUBST(APXS,$APXS)

AC_ARG_WITH(apr, AC_HELP_STRING([--with-apr=<dir>], [Location of Apache Portable Runtime library config]))
if test "$with_apr" != "no" ; then
  if test "$with_apr" == "yes" -o -z "$with_apr" ; then
    AC_PATH_PROG(APRCONFIG,apr-1-config,,[$APACHE_BINDIRS])
    if test -z "$APRCONFIG" ; then
      AC_PATH_PROG(APRCONFIG,apr-config,,[$APACHE_BINDIRS])
    fi
    if test -z "$APRCONFIG" ; then
      AC_CHECK_PROG(APRCONFIG, apr-config, apr-config)
    fi
  else
    AC_PATH_PROG(APRCONFIG,apr-1-config,,[$with_apr/sbin $with_apr/bin])
    if test -z "$APRCONFIG" ; then
      AC_PATH_PROG(APRCONFIG,apr-config,,[$with_apr/sbin $with_apr/bin])
    fi
  fi
  if test -n "$with_apr" -a -z "$APRCONFIG" ; then
    AC_MSG_ERROR([*** apr-config missing - check your Apache installation or use the --with-apr flag ***])
  else if test -n "$APRCONFIG" ; then
    CPPFLAGS="`$APRCONFIG --includes` $CPPFLAGS"
    CFLAGS="`$APRCONFIG --cflags` $CPPFLAGS"
    CXXFLAGS="`$APRCONFIG --cppflags` $CXXFLAGS"
    LDFLAGS="`$APRCONFIG --link-libtool --libs` $LDFLAGS"
  fi ; fi
fi

AC_ARG_WITH(apu, AC_HELP_STRING([--with-apu=<dir>], [Location of Apache Portable Utility library config]))
if test "$with_apu" != "no" ; then
  if test "$with_apu" == "yes" -o -z "$with_apu" ; then
    AC_PATH_PROG(APUCONFIG,apu-1-config,,[$APACHE_BINDIRS])
    if test -z "$APUCONFIG" ; then
      AC_PATH_PROG(APUCONFIG,apu-config,,[$APACHE_BINDIRS])
    fi
    if test -z "$APUCONFIG" ; then
      AC_CHECK_PROG(APUCONFIG, apu-config, apu-config)
    fi
  else
    AC_PATH_PROG(APUCONFIG,apu-1-config,,[$with_apu/sbin $with_apu/bin])
    if test -z "$APUCONFIG" ; then
      AC_PATH_PROG(APUCONFIG,apu-config,,[$with_apu/sbin $with_apu/bin])
    fi
  fi
  if test -n "$with_apu" -a -z "$APUCONFIG" ; then
    AC_MSG_ERROR([*** apu-config missing - check your Apache installation or use the --with-apu flag ***])
  else if test -n "$APUCONFIG" ; then
    CPPFLAGS="$CPPFLAGS `$APUCONFIG --includes`"
    LDFLAGS="$LDFLAGS `$APUCONFIG --link-libtool --libs`"
  fi ; fi
fi

AC_MSG_CHECKING([Apache httpd version])
APACHE_VERSION=`$HTTPD -v | sed -e 's/^Server version: \(.*\)$/\1/p' -e d`
AC_MSG_RESULT([$APACHE_VERSION])
echo $APACHE_VERSION | grep >/dev/null 2>/dev/null Apache/2
if test $? != 0 ; then
  AC_MSG_ERROR([*** incorrect Apache version -- we need Apache/2.0.50 or newer])
fi
APACHE_SUBVERSION=`echo $APACHE_VERSION | sed -e 's/^.*Apache\/2.0.\\([[0-9]]*\\).*$/\\1/p' -e d`
if test -n "$APACHE_SUBVERSION" ; then
  if test $APACHE_SUBVERSION -lt 50 ; then
    AC_MSG_ERROR([*** incorrect Apache version -- we need Apache/2.0.50 or newer])
  fi
fi

AC_MSG_CHECKING(Apache module directory)
libdir=`${APXS} -q LIBEXECDIR`
AC_SUBST(libdir)
AC_MSG_RESULT("$libdir")
AC_MSG_CHECKING(Apache executable binaries directory)
bindir=`${APXS} -q BINDIR`
AC_SUBST(bindir)
AC_MSG_RESULT("$bindir")
sbindir=`${APXS} -q SBINDIR 2>/dev/null || ${APXS} -q BINDIR`
AC_SUBST(sbindir)
AC_MSG_RESULT("$sbindir")

AC_MSG_CHECKING(Apache MPM)
if ${HTTPD} -l | egrep -v 'mod_|:|core' | grep >/dev/null 2>/dev/null worker ; then
  AC_MSG_RESULT([worker.. ok]);
else if ${HTTPD} -l | egrep -v 'mod_|:|core' | grep >/dev/null 2>/dev/null prefork ; then
  AC_MSG_RESULT([prefork.. ok]);
else
  AC_MSG_ERROR("Apache must be compiled with --with-mpm=worker or --with-mpm=prefork")
  AC_MSG_ERROR([*** Apache must be compiled with --with-mpm=worker or --with-mpm=prefork ***])
fi ; fi

AC_ARG_WITH(openssl, AC_HELP_STRING([--with-openssl=<dir>], [Location of OpenSSL library]))
AC_ARG_ENABLE(psodium, AC_HELP_STRING([--enable-psodium], [Enable the pSodium module]),
[case "${enableval}" in
  no)  psodium=false
       ;;
  yes) psodium=true
       AC_DEFINE(PSODIUM, 1, "Enabled pSodium support")
       ;;
  *)   psodium=true
       AC_DEFINE(PSODIUM, 1, "Enabled pSodium support")
       ;;
esac
AC_MSG_CHECKING(for OpenSSL)
if test "$with_openssl" != "no" ; then
  if test "$with_openssl" == "yes" -o -z "$with_openssl" ; then
    AC_SUBST(OPENSSLDIR,/usr)
  else
    AC_SUBST(OPENSSLDIR,$with_openssl)
  fi
  if test -e $OPENSSLDIR/include/openssl/ssl.h; then
    AC_MSG_RESULT($OPENSSLDIR)
    CFLAGS="$CFLAGS -I$OPENSSLDIR/include"
    CPPFLAGS="$CPPFLAGS -I$OPENSSLDIR/include"
    LDFLAGS="$LDFLAGS -L$OPENSSLDIR -R$OPENSSLDIR -lcrypto"
  else
    AC_MSG_ERROR( $OPENSSLDIR/include/openssl/ssl.h not found. OpenSSL is a required package. Use/check the --with-openssl parameter)
  fi
else
  if test "$psodium" = true ; then
    AC_MSG_ERROR([ not found! *** OpenSSL is a required package for pSodium  ***])
  else
    AC_MSG_RESULT([skipped])
  fi
fi
],[psodium=false])
AM_CONDITIONAL(PSODIUM, test x$psodium = xtrue)

# Add the flags necessary for Apache during compilation
CPPFLAGS="$CPPFLAGS -I`$APXS -q INCLUDEDIR`"
CFLAGS="$CFLAGS `${APXS} -q CFLAGS`"
CXXFLAGS="$CXXFLAGS `${APXS} -q CFLAGS`"
LDFLAGS="$LDFLAGS -L`$APXS -q LIBDIR`"

# Apache 2.2.x won't compile with this one for regular C file apr_myapr.h
CFLAGS="$CFLAGS -D_LARGEFILE64_SOURCE"

AC_CHECK_HEADER(apr.h, [], AC_MSG_ERROR([*** header files of Apache missing - install devel package too ***]))

CFLAGS="$CFLAGS -Wmissing-declarations"
LDFLAGS="$LDFLAGS -release $VERSION"

AC_SUBST(CFLAGS,[$CFLAGS])
AC_SUBST(CXXFLAGS,[$CXXFLAGS])
AC_SUBST(CPPFLAGS,[$CPPFLAGS])
AC_SUBST(LDFLAGS,[$LDFLAGS])

dnl For tests
AC_PATH_PROG(PERL, perl, "")

AC_ARG_ENABLE(documentation,AC_HELP_STRING([--enable-documentation[=DIR]], [Enable the installation of Globule documentation in run-time tree]),
[case "${enableval}" in
  no)  instdocumentation=false
       ;;
  yes) instdocumentation=`${APXS} -q htdocsdir`/globule-docs
       AC_SUBST(INSTDOCUMENTATION, $instdocumentation)
       AC_DEFINE(INSTDOCUMENTATION, $instdocumentation, "Install documentation")
       ;;
  *)   instdocumentation=${enableval}
       AC_SUBST(INSTDOCUMENTATION, $instdocumentation)
       AC_DEFINE(INSTDOCUMENTATION, $instdocumentation, "Install documentation in specified directory")
       ;;
esac
],[instdocumentation=false])
AM_CONDITIONAL(INSTDOCUMENTATION, test x$instdocumentation != xfalse)

AC_ARG_ENABLE(globuleadm,AC_HELP_STRING([--enable-globuleadm[=DIR]], [Enable the installation of Globule auxiliar files in run-time tree]),
[case "${enableval}" in
  no)  instglobuleadm=false
       ;;
  yes) instglobuleadm=`${APXS} -q htdocsdir`/globuleadm
       AC_SUBST(INSTGLOBULEADM, $instglobuleadm)
       AC_DEFINE(INSTGLOBULEADM, $instglobuleadm, "Install Globule administration files")
       ;;
  *)   instglobuleadm=${enableval}
       AC_SUBST(INSTGLOBULEADM, $instglobuleadm)
       AC_DEFINE(INSTGLOBULEADM, $instglobuleadm, "Install Globule administration files in specified directory")
       ;;
esac
],[instglobuleadm=false])
AM_CONDITIONAL(INSTGLOBULEADM, test x$instglobuleadm != xfalse)

AC_OUTPUT(Makefile globule/Makefile globule/adapt/Makefile psodium/Makefile psodium/auditorctl sample/Makefile tests/Makefile tests/psodium/Makefile doc/Makefile monitor/Makefile tools/globulectl)

if test x$debug = xtrue -o x$psodium = xtrue ; then
  echo "----------------------------------------------------------------------"
  if test x$debug = xtrue ; then
    echo "This Globule source installation has now been configured with the"
    echo "debug option on.  This means that some additional checks and verbose"
    echo "debugging output is enabled, which can cause assertion aborts"
    echo "during incorrect operation.  Additional checks may also slow the"
    echo "server down.  External access to the server has been included."
    echo "You probably do not want this option on for production environments."
  fi
  if test x$psodium = xtrue ; then
    echo "The pSodium module is included in the compilation process.  Note"
    echo "that this module should be considered alpha-release material."
  fi
  echo "----------------------------------------------------------------------"
fi
